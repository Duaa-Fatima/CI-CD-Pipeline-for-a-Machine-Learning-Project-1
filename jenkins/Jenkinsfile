pipeline {
    agent any

    environment {
        PYTHON = 'python'  
    }

    triggers {
        githubPush()  
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/dev']],  // Checkout the dev branch
                    userRemoteConfigs: [[url: 'https://github.com/Duaa-Fatima/CI-CD-Pipeline-for-a-Machine-Learning-Project-1']]
                ])
            }
        }

        stage('Flake8 Code Quality Check') {
            steps {
                script {
                    echo 'Installing and running Flake8...'
                    bat 'python -m pip install flake8'
                    bat 'python -m flake8 app --max-line-length=100'  // Adjust directory if needed
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker build -t wthduaa/diabetes-predictor:latest -f docker/Dockerfile .' 
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    bat 'docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%'
                    
                    // Push the image
                    bat 'docker push wthduaa/diabetes-predictor:latest'
                }
            }
        }

        stage('Email Notification') {
            steps {
                script {
                    powershell '''
                    $smtpServer = "smtp.gmail.com"
                    $smtpPort = "587"
                    $emailFrom = "fatimaduaa053@gmail.com"
                    $emailTo = "fatimaduaa053@gmail.com"
                    $subject = "Jenkins Pipeline Success"
                    $body = "CI/CD Pipeline Completed Successfully!"
                    $username = "fatimaduaa053@gmail.com"
                    $password = "gjrt exav juqi roei"

                    $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
                    $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

                    Send-MailMessage -From $emailFrom -To $emailTo -Subject $subject -Body $body -SmtpServer $smtpServer -Port $smtpPort -UseSsl -Credential $credential
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
